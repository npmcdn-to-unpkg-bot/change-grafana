/*! grafana - v3.0.0-pre1 - 2016-02-22
 * Copyright (c) 2016 Torkel Ã–degaard; Licensed Apache-2.0 */

System.register(["test/lib/common","../influx_query"],function(a){var b,c;return{setters:[function(a){b=a},function(a){c=a}],execute:function(){b.describe("InfluxQuery",function(){b.describe("render series with mesurement only",function(){b.it("should generate correct query",function(){var a=new c["default"]({measurement:"cpu"}),d=a.render();b.expect(d).to.be('SELECT mean("value") FROM "cpu" WHERE $timeFilter GROUP BY time($interval) fill(null)')})}),b.describe("render series with policy only",function(){b.it("should generate correct query",function(){var a=new c["default"]({measurement:"cpu",policy:"5m_avg"}),d=a.render();b.expect(d).to.be('SELECT mean("value") FROM "5m_avg"."cpu" WHERE $timeFilter GROUP BY time($interval) fill(null)')})}),b.describe("render series with math and alias",function(){b.it("should generate correct query",function(){var a=new c["default"]({measurement:"cpu",select:[[{type:"field",params:["value"]},{type:"mean",params:[]},{type:"math",params:["/100"]},{type:"alias",params:["text"]}]]}),d=a.render();b.expect(d).to.be('SELECT mean("value") /100 AS "text" FROM "cpu" WHERE $timeFilter GROUP BY time($interval) fill(null)')})}),b.describe("series with single tag only",function(){b.it("should generate correct query",function(){var a=new c["default"]({measurement:"cpu",groupBy:[{type:"time",params:["auto"]}],tags:[{key:"hostname",value:"server\\1"}]}),d=a.render();b.expect(d).to.be('SELECT mean("value") FROM "cpu" WHERE "hostname" = \'server\\\\1\' AND $timeFilter GROUP BY time($interval)')}),b.it("should switch regex operator with tag value is regex",function(){var a=new c["default"]({measurement:"cpu",groupBy:[{type:"time",params:["auto"]}],tags:[{key:"app",value:"/e.*/"}]}),d=a.render();b.expect(d).to.be('SELECT mean("value") FROM "cpu" WHERE "app" =~ /e.*/ AND $timeFilter GROUP BY time($interval)')})}),b.describe("series with multiple tags only",function(){b.it("should generate correct query",function(){var a=new c["default"]({measurement:"cpu",groupBy:[{type:"time",params:["auto"]}],tags:[{key:"hostname",value:"server1"},{key:"app",value:"email",condition:"AND"}]}),d=a.render();b.expect(d).to.be('SELECT mean("value") FROM "cpu" WHERE "hostname" = \'server1\' AND "app" = \'email\' AND $timeFilter GROUP BY time($interval)')})}),b.describe("series with tags OR condition",function(){b.it("should generate correct query",function(){var a=new c["default"]({measurement:"cpu",groupBy:[{type:"time",params:["auto"]}],tags:[{key:"hostname",value:"server1"},{key:"hostname",value:"server2",condition:"OR"}]}),d=a.render();b.expect(d).to.be('SELECT mean("value") FROM "cpu" WHERE "hostname" = \'server1\' OR "hostname" = \'server2\' AND $timeFilter GROUP BY time($interval)')})}),b.describe("series with groupByTag",function(){b.it("should generate correct query",function(){var a=new c["default"]({measurement:"cpu",tags:[],groupBy:[{type:"time",interval:"auto"},{type:"tag",params:["host"]}]}),d=a.render();b.expect(d).to.be('SELECT mean("value") FROM "cpu" WHERE $timeFilter GROUP BY time($interval), "host"')})}),b.describe("render series without group by",function(){b.it("should generate correct query",function(){var a=new c["default"]({measurement:"cpu",select:[[{type:"field",params:["value"]}]],groupBy:[]}),d=a.render();b.expect(d).to.be('SELECT "value" FROM "cpu" WHERE $timeFilter')})}),b.describe("render series without group by and fill",function(){b.it("should generate correct query",function(){var a=new c["default"]({measurement:"cpu",select:[[{type:"field",params:["value"]}]],groupBy:[{type:"time"},{type:"fill",params:["0"]}]}),d=a.render();b.expect(d).to.be('SELECT "value" FROM "cpu" WHERE $timeFilter GROUP BY time($interval) fill(0)')})}),b.describe("when adding group by part",function(){b.it("should add tag before fill",function(){var a=new c["default"]({measurement:"cpu",groupBy:[{type:"time"},{type:"fill"}]});a.addGroupBy("tag(host)"),b.expect(a.target.groupBy.length).to.be(3),b.expect(a.target.groupBy[1].type).to.be("tag"),b.expect(a.target.groupBy[1].params[0]).to.be("host"),b.expect(a.target.groupBy[2].type).to.be("fill")}),b.it("should add tag last if no fill",function(){var a=new c["default"]({measurement:"cpu",groupBy:[]});a.addGroupBy("tag(host)"),b.expect(a.target.groupBy.length).to.be(1),b.expect(a.target.groupBy[0].type).to.be("tag")})}),b.describe("when adding select part",function(){b.it("should add mean after after field",function(){var a=new c["default"]({measurement:"cpu",select:[[{type:"field",params:["value"]}]]});a.addSelectPart(a.selectModels[0],"mean"),b.expect(a.target.select[0].length).to.be(2),b.expect(a.target.select[0][1].type).to.be("mean")}),b.it("should replace sum by mean",function(){var a=new c["default"]({measurement:"cpu",select:[[{type:"field",params:["value"]},{type:"mean"}]]});a.addSelectPart(a.selectModels[0],"sum"),b.expect(a.target.select[0].length).to.be(2),b.expect(a.target.select[0][1].type).to.be("sum")}),b.it("should add math before alias",function(){var a=new c["default"]({measurement:"cpu",select:[[{type:"field",params:["value"]},{type:"mean"},{type:"alias"}]]});a.addSelectPart(a.selectModels[0],"math"),b.expect(a.target.select[0].length).to.be(4),b.expect(a.target.select[0][2].type).to.be("math")}),b.it("should add math last",function(){var a=new c["default"]({measurement:"cpu",select:[[{type:"field",params:["value"]},{type:"mean"}]]});a.addSelectPart(a.selectModels[0],"math"),b.expect(a.target.select[0].length).to.be(3),b.expect(a.target.select[0][2].type).to.be("math")}),b.it("should replace math",function(){var a=new c["default"]({measurement:"cpu",select:[[{type:"field",params:["value"]},{type:"mean"},{type:"math"}]]});a.addSelectPart(a.selectModels[0],"math"),b.expect(a.target.select[0].length).to.be(3),b.expect(a.target.select[0][2].type).to.be("math")})})})}}});