/*! grafana - v3.0.0-pre1 - 2016-02-22
 * Copyright (c) 2016 Torkel Ã–degaard; Licensed Apache-2.0 */

System.register(["lodash","app/core/utils/datemath","./influx_series","./influx_query"],function(a){function b(a,b,g,h){function i(a){var b=j(a.rangeRaw.from,!1),c=j(a.rangeRaw.to,!0),d="s"===b[b.length-1];return"now()"!==c||d?"time > "+b+" and time < "+c:"time > "+b}function j(a,b){if(c["default"].isString(a)){if("now"===a)return"now()";var e=/^now-(\d+)([d|h|m|s])$/.exec(a);if(e){var f=parseInt(e[1]),g=e[2];return"now() - "+f+g}a=d.parse(a,b)}return(a.valueOf()/1e3).toFixed(0)+"s"}this.type="influxdb",this.urls=c["default"].map(a.url.split(","),function(a){return a.trim()}),this.username=a.username,this.password=a.password,this.name=a.name,this.database=a.database,this.basicAuth=a.basicAuth,this.interval=(a.jsonData||{}).timeInterval,this.supportAnnotations=!0,this.supportMetrics=!0,this.query=function(a){var b,d,g=i(a),j=[],k=c["default"].map(a.targets,function(b){if(b.hide)return[];j.push(b);var c=new f["default"](b),d=c.render();return d=d.replace(/\$interval/g,b.interval||a.interval)}).join("\n");return k=k.replace(/\$timeFilter/g,g),k=h.replace(k,a.scopedVars),this._seriesQuery(k).then(function(c){if(!c||!c.results)return[];var f=[];for(b=0;b<c.results.length;b++){var g=c.results[b];if(g&&g.series){var i=j[b],k=i.alias;k&&(k=h.replace(i.alias,a.scopedVars));var l=new e["default"]({series:c.results[b].series,alias:k});switch(i.resultFormat){case"table":f.push(l.getTable());break;default:var m=l.getTimeSeries();for(d=0;d<m.length;d++)f.push(m[d])}}}return{data:f}})},this.annotationQuery=function(a){var b=i({rangeRaw:a.rangeRaw}),c=a.annotation.query.replace("$timeFilter",b);return c=h.replace(c),this._seriesQuery(c).then(function(b){if(!b||!b.results||!b.results[0])throw{message:"No results in response from InfluxDB"};return new e["default"]({series:b.results[0].series,annotation:a.annotation}).getAnnotations()})},this.metricFindQuery=function(a){var d;try{d=h.replace(a)}catch(e){return b.reject(e)}return this._seriesQuery(d).then(function(a){if(!a||0===a.results.length)return[];var b=a.results[0];if(!b.series)return[];var d=b.series[0];return c["default"].map(d.values,function(a){return c["default"].isArray(a)?{text:a[0]}:{text:a}})})},this._seriesQuery=function(a){return this._influxRequest("GET","/query",{q:a,epoch:"ms"})},this.testDatasource=function(){return this.metricFindQuery("SHOW MEASUREMENTS LIMIT 1").then(function(){return{status:"success",message:"Data source is working",title:"Success"}})},this._influxRequest=function(a,b,d){var e=this,f=e.urls.shift();e.urls.push(f);var h={u:e.username,p:e.password};e.database&&(h.db=e.database),"GET"===a&&(c["default"].extend(h,d),d=null);var i={method:a,url:f+b,params:h,data:d,precision:"ms",inspect:{type:"influxdb"}};return i.headers=i.headers||{},e.basicAuth&&(i.headers.Authorization=e.basicAuth),g.datasourceRequest(i).then(function(a){return a.data},function(a){if(0!==a.status||a.status>=300)throw a.data&&a.data.error?{message:"InfluxDB Error Response: "+a.data.error,data:a.data,config:a.config}:{message:"InfluxDB Error: "+a.message,data:a.data,config:a.config}})}}b.$inject=["instanceSettings","$q","backendSrv","templateSrv"];var c,d,e,f;return a("InfluxDatasource",b),{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a}],execute:function(){}}});